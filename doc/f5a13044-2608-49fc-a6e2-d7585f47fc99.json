{
    "summary": "The code manages CORS, handles events and interactions, sets up listeners, updates state, controls the app's button, checks whitelisted hostnames, and adds required headers.",
    "details": [
        {
            "comment": "This code appears to be a part of an extension for managing Cross-Origin Resource Sharing (CORS) settings. It contains functions for updating the state, handling popup events, and sending storage information. The listener function checks for \"access-control-request-headers\" in the request headers.",
            "location": "\"/media/root/Prima/works/generated_docs/lazero_doc/src/bootstrap/keller/src/ced/lib/common.js\":0-33",
            "content": "var core = {\n  \"update\": {\n    \"state\": function () {\n      config.addon.state = \"ON\";\n      /* quick fix. */\n      core.update.popup();\n      app.webrequest.listener();\n      app.button.badge(config.addon.state);\n      app.button.title(\"Access-Control-Allow-Origin: \" + config.addon.state);\n    },\n    \"popup\": function () {\n      app.tab.active.query(function (tab) {\n        app.popup.send(\"storage\", {\n          \"tab\": tab,\n          \"state\": config.addon.state,\n          \"whitelist\": config.cors.whitelist\n        });\n      });\n    },\n    \"options\": function () {\n      app.options.send(\"storage\", {\n        \"origin\": config.cors.origin,\n        \"methods\": config.cors.methods,\n        \"headers\": config.cors.headers,\n        \"whitelist\": config.cors.whitelist,\n        \"credentials\": config.cors.credentials\n      });\n    }\n  },\n  \"listener\": {\n    \"before\": {\n      \"send\": {\n        \"headers\": function (info) {\n          var requestHeaders = info.requestHeaders.find(e => e.name.toLowerCase() === \"access-control-request-headers\");"
        },
        {
            "comment": "This code checks if the received headers match the CORS configuration. If a whitelisted hostname is detected, it skips further processing. It filters out unnecessary response headers and adds required CORS headers if needed, based on the configuration. The code also checks if there's an existing requestId in the MAP and updates the headers accordingly.",
            "location": "\"/media/root/Prima/works/generated_docs/lazero_doc/src/bootstrap/keller/src/ced/lib/common.js\":34-50",
            "content": "          if (requestHeaders) config.addon.MAP.set(info.requestId, requestHeaders.value);\n        }\n      }\n    },\n    \"headers\": {\n      \"received\": function (info) {\n        var top = info.initiator || info.documentUrl || info.originUrl || info.url;\n        /*  */\n        var hostname = top ? app.hostname(top) : '';\n        if (config.cors.whitelist.indexOf(hostname) !== -1) return;\n        /*  */\n        var responseHeaders = info.responseHeaders.filter(e => e.name.toLowerCase() !== \"access-control-allow-origin\" && e.name.toLowerCase() !== \"access-control-allow-methods\");        \n      \tif (config.cors.credentials) responseHeaders.push({\"name\": \"Access-Control-Allow-Credentials\", \"value\": JSON.stringify(config.cors.credentials)});\n      \tresponseHeaders.push({\"name\": \"Access-Control-Allow-Origin\", \"value\": config.cors.origin ? '*' : app.origin(top)});\n      \tresponseHeaders.push({\"name\": \"Access-Control-Allow-Methods\", \"value\": config.cors.methods});\n        if (config.cors.headers) {\n          if (config.addon.MAP.has(info.requestId)) {"
        },
        {
            "comment": "Code handles CORS (Cross-Origin Resource Sharing) for a web extension. It manages the whitelist of allowed hosts, updates the popup, and controls the state based on received messages from the popup.",
            "location": "\"/media/root/Prima/works/generated_docs/lazero_doc/src/bootstrap/keller/src/ced/lib/common.js\":51-86",
            "content": "            responseHeaders.push({\"name\": \"Access-Control-Allow-Headers\", \"value\": config.addon.MAP.get(info.requestId)});\n            config.addon.MAP.delete(info.requestId);\n          }\n        }\n        /*  */\n      \treturn {\"responseHeaders\": responseHeaders};\n      }\n    }\n  }\n};\napp.popup.receive(\"whitelist\", function () {\n  app.tab.active.query(function (tab) {\n    if (tab && tab.url) {\n      if (tab.url.indexOf(\"http\") === 0) {\n        var tmp = new URL(tab.url);\n        var whitelist = config.cors.whitelist;\n        var hostname = tmp.hostname.replace(\"www.\", '');\n        /*  */\n        var index = whitelist.indexOf(hostname);\n        if (index !== -1) whitelist.splice(index, 1);\n        else {\n          whitelist.push(hostname);\n          whitelist = whitelist.filter(function (a, b) {return whitelist.indexOf(a) === b});\n        }\n        /*  */\n        config.cors.whitelist = whitelist;\n      }\n    }\n    /*  */\n    core.update.popup();\n  });\n});\napp.popup.receive(\"load\", core.update.popup);\napp.popup.receive(\"toggle\", core.update.state);"
        },
        {
            "comment": "This code is responsible for handling various events and interactions within the application. It sets up listeners for popup messages, options changes, and web requests. It also handles hotkeys and updates the state accordingly. Additionally, it sets the badge text on the app's button and updates its title based on the addon's current state.",
            "location": "\"/media/root/Prima/works/generated_docs/lazero_doc/src/bootstrap/keller/src/ced/lib/common.js\":87-106",
            "content": "app.popup.receive(\"reload\", app.tab.active.reload);\napp.popup.receive(\"options\", app.tab.options.page);\napp.popup.receive(\"support\", function () {app.tab.open(app.homepage())});\napp.popup.receive(\"test\", function () {app.tab.open(config.addon.test.page)});\napp.popup.receive(\"donation\", function () {app.tab.open(app.homepage() + \"?reason=support\")});\napp.options.receive(\"load\", core.update.options);\napp.options.receive(\"origin\", function (e) {config.cors.origin = e});\napp.options.receive(\"methods\", function (e) {config.cors.methods = e});\napp.options.receive(\"headers\", function (e) {config.cors.headers = e});\napp.options.receive(\"whitelist\", function (e) {config.cors.whitelist = e});\napp.options.receive(\"credentials\", function (e) {config.cors.credentials = e});\nwindow.setTimeout(function () {\n  app.button.badge(config.addon.state);\n  app.button.title(\"Access-Control-Allow-Origin: \" + config.addon.state);\n}, 0);\napp.webrequest.listener();\napp.hotkey(function (e) {if (e === \"_mode\") core.update.state()});"
        }
    ]
}