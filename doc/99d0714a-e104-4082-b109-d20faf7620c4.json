{
    "summary": "Code establishes a WebSocket connection, handles errors and messages, fetches content across document states, and is specific to Firefox browser.",
    "details": [
        {
            "comment": "This code defines a function `initWebsocket` that initializes a WebSocket connection with the given URL. The function takes optional parameters for an existing WebSocket, timeout duration, and number of retries on failure or timeout. If no existing WebSocket is provided, it uses the `sleep` function to wait before retrying or rejecting the promise after the specified timeout or number of retries.",
            "location": "\"/media/root/Prima/works/generated_docs/lazero_doc/src/bootstrap/keller/src/ced/borderify.js\":0-24",
            "content": "/*\nJust draw a border round the document.body.\n*/\n// yes. man. ahead of shit.\n// console.log(\"\");\n// add all fucking permissions here!\n// this shit is executable somehow?\nfunction sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n}\n/**\n * inits a websocket by a given url, returned promise resolves with initialized websocket, rejects after failure/timeout.\n *\n * @param url the websocket url to init\n * @param existingWebsocket if passed and this passed websocket is already open, this existingWebsocket is resolved, no additional websocket is opened\n * @param timeoutMs the timeout in milliseconds for opening the websocket\n * @param numberOfRetries the number of times initializing the socket should be retried, if not specified or 0, no retries are made\n *        and a failure/timeout causes rejection of the returned promise\n * @return {Promise}\n */\nfunction initWebsocket(url, existingWebsocket, timeoutMs, numberOfRetries) {\n    timeoutMs = timeoutMs ? timeoutMs : 1500;\n    numberOfRetries = numberOfRetries ? numberOfRetries : 0;"
        },
        {
            "comment": "The code attempts to establish a WebSocket connection with the given URL, and handles various events such as open, close, and error. If the connection is successfully established within the specified timeout, it resolves with the WebSocket object; otherwise, it rejects with an internal error.",
            "location": "\"/media/root/Prima/works/generated_docs/lazero_doc/src/bootstrap/keller/src/ced/borderify.js\":25-51",
            "content": "    var hasReturned = false;\n    var promise = new Promise((resolve, reject) => {\n        setTimeout(function () {\n            if(!hasReturned) {\n                console.info('opening websocket timed out: ' + url);\n                rejectInternal();\n            }\n        }, timeoutMs);\n        if (!existingWebsocket || existingWebsocket.readyState != existingWebsocket.OPEN) {\n            if (existingWebsocket) {\n                existingWebsocket.close();\n            }\n            var websocket = new WebSocket(url);\n            websocket.onopen = function () {\n                if(hasReturned) {\n                    websocket.close();\n                } else {\n                    console.info('websocket to opened! url: ' + url);\n                    resolve(websocket);\n                }\n            };\n            websocket.onclose = function () {\n                console.info('websocket closed! url: ' + url);\n                rejectInternal();\n            };\n            websocket.onerror = function () {\n                console.info('websocket error! url: ' + url);"
        },
        {
            "comment": "Code initializes a WebSocket connection with retry mechanism. If the connection is successful, it resolves the promise; otherwise, it retries based on the number of remaining retries. The 'dfunc' function continuously checks for a border and attempts to set it if none exists. The console message is an announcement about the LAzero plugin.",
            "location": "\"/media/root/Prima/works/generated_docs/lazero_doc/src/bootstrap/keller/src/ced/borderify.js\":52-81",
            "content": "                rejectInternal();\n            };\n        } else {\n            resolve(existingWebsocket);\n        }\n        function rejectInternal() {\n            if(numberOfRetries <= 0) {\n                reject();\n            } else if(!hasReturned) {\n                hasReturned = true;\n                console.info('retrying connection to websocket! url: ' + url + ', remaining retries: ' + (numberOfRetries-1));\n                initWebsocket(url, null, timeoutMs, numberOfRetries-1).then(resolve, reject);\n            }\n        }\n    });\n    promise.then(function () {hasReturned = true;}, function () {hasReturned = true;});\n    return promise;\n};\n// do not do it twice.\nasync function dfunc() {\n    while (true) {\n        await sleep(500);\n        // no fucking border.\n        try { document.body.style.border = \"5px solid red\"; break }\n        catch (e) { console.log(e); }\n    }\n}\nconsole.log(\"LAZERO PLUGIN\\n    -\\n   |               ___  __  __\\n  / \\\\  |    /|  /  ___ |   |  |\\n \\\\  _\\\\ |__ / | /__ ___ |   |__|\\n\\nTo make everything\\nexecutable, analyzable, controllable.\");"
        },
        {
            "comment": "This code initiates an async function, `func()`, which continuously checks for a response from \"https://localhost:5000/nothing\". It also includes error logging. Additionally, another async function, `sfunc(init)`, is responsible for setting up a WebSocket connection to \"wss://localhost:5000/random\" using the `initWebsocket()` method. The function keeps the WebSocket connection alive with regular keep-alive messages and handles cancellation when needed.",
            "location": "\"/media/root/Prima/works/generated_docs/lazero_doc/src/bootstrap/keller/src/ced/borderify.js\":82-118",
            "content": "dfunc();\n// it is async.\nasync function func() {\n    while (true) {\n        await sleep(1000);\n        // no fucking border.\n        try { fetch(\"https://localhost:5000/nothing\",{credentials:'include'}).then(function(response){console.log(response)}).catch(function(ex){console.log(\"Exception: \",ex)}) }\n        catch (e) { console.log(e); }\n    }\n}\nfunc();\nvar socket_0;\nasync function sfunc(init){\n\tawait sleep(init);\nwhile (true){\n\ttry{\n\t\t//socket = new WebSocket(\"wss://localhost:5000/random\");\ninitWebsocket(\"wss://localhost:5000/random\",null,3000,0).then(function (socket){\nsocket_0=socket;\nvar timerId = 0;\n\tconsole.log(\"ws init succeed\");\nfunction keepAlive(webSocket) {\n var timeout = 15000;\n if (webSocket.readyState == webSocket.OPEN) {\n  webSocket.send('');\n }\n timerId = setTimeout(keepAlive(webSocket), timeout);\n}\nfunction cancelKeepAlive() {\n if (timerId) {\n  cancelTimeout(timerId);\n }\n}\nsocket.onopen = function(e) {\n\tkeepAlive(socket_0);\n  console.log(\"[open] Connection established\");\n  console.log(\"Sending to server\");"
        },
        {
            "comment": "This code is setting up a WebSocket connection, sending a message to the server with the name \"John\", and handling incoming messages from the server. It checks if the received data is a string containing a URL starting with \"https://\". If it is, the code uses fetch to retrieve the content at that URL and sends it back over the WebSocket connection. If the request fails or the response is empty, it sends a default message instead. The purpose seems to be receiving and sending data through a WebSocket connection while handling potential errors.",
            "location": "\"/media/root/Prima/works/generated_docs/lazero_doc/src/bootstrap/keller/src/ced/borderify.js\":119-150",
            "content": "  socket.send(\"My name is John\");\n};\n// what is this anyway?\nsocket.onmessage = function(event) {\n\tvar edata = event.data;\n  console.log(`[message] Data received from server: `)\n\t  console.log(edata,typeof(edata),edata.includes(\"baidu\"));\n\tif (typeof(edata)===typeof(\"string\")){\n\t\tif (edata.includes(\"https://\")){\n\t\t\tvar random=\"fetch failed\";\n\t\t\tfetch(edata,{method:\"GET\",credentials:\"include\"}).then(function(resp){\n\t\t\t\tconsole.log(\"CONTENT: \",resp);\n//\t\t\t\tconsole.log(\"CONTENT: \",e.body);\n\t\t\t\t//\tit is not with cookies.\n//\t\t\t\tconst ebody=e.body.getReader();\n\t\t\t\t//get your fuck binary.\n//\t\t\t\tconst ebody=resp.blob();\n\t\t\t\tresp.text().then(function(txt){try{\n\t\t\t\t\tconsole.log(\"CTEXT: \",txt.length);\n\t\t\t\tsocket.send(txt);\n\t\t\t\t}catch(err){console.log(\"EMPTY RESPONSE:\",err);\n\t\tsocket.send(random);\n\t\t\t\t\t}},function(err){console.log(\"ERR PROMISE:\",err);\n\t\tsocket.send(random);\n\t\t\t\t\t})\n\t\t\t\t// what is that thing?\n\t\t\t\t// get the content please?\n\t\t\t}).catch(function(e){\n\t\t\t\tconsole.log(\"ERROR: \",e);\n\t\t\t\tsocket.send(random);\n\t\t\t})\n\t\t}else{"
        },
        {
            "comment": "Code handles WebSocket events and actions, sending messages if the input is not a URL or not a string. It also logs connection close events with error codes and reasons, handles connection errors, and attempts to establish a WebSocket connection after a delay in case of failure. The code uses a sleep function and a document readiness check in a try-catch block. There are three states the document can be in: loading, interactive, and complete.",
            "location": "\"/media/root/Prima/works/generated_docs/lazero_doc/src/bootstrap/keller/src/ced/borderify.js\":151-196",
            "content": "  socket.send(\"NOT BAIDU URL\");\n  console.log(\"NOT BAIDU URL\");\n\t\t}\n\t}else{\n  socket.send(\"NOT STRING\");\n  console.log(\"NOT STRING\");\n\t}\n\t// what data?\n};\nsocket.onclose = function(event) {\n\tsfunc(3000);\n  if (event.wasClean) {\n    console.log(`[close] Connection closed cleanly, code=${event.code} reason=${event.reason}`);\n  } else {\n    // e.g. server process killed or network down\n    // event.code is usually 1006 in this case\n\t  // get uuid from elsewhere? check it logically.\n    console.log('[close] Connection died');\n  }\n\tcancelKeepAlive();\n\t// keep calling.\n};\nsocket.onerror = function(error) {\n\tsfunc(3000);\n  console.log(`[error] ${error.message}`);\n}},function(){\nsfunc(3000);\n\tconsole.log(\"ws init failed\");\n})\n\t\t// not usable? do it some time later?\nawait sleep(3000);\n\tbreak;\t\t// wss://\n\t}catch(e){console.log(e);}\n}\n}\nsfunc(0);\n// how to dump the full shit?\n// so there are three states.\n// switch (document.readyState) {\n//     case \"loading\":\n//       // The document is still loading.\n//       break;\n//     case \"interactive\":"
        },
        {
            "comment": "The code checks the document's ready state and performs different actions depending on it. When the document is loaded, a span element is appended to the body. When fully loaded, it logs the first CSS rule from the first style sheet. The code also handles URL schemes for different types of data access.",
            "location": "\"/media/root/Prima/works/generated_docs/lazero_doc/src/bootstrap/keller/src/ced/borderify.js\":197-223",
            "content": "//       // The document has finished loading. We can now access the DOM elements.\n//       // But sub-resources such as images, stylesheets and frames are still loading.\n//       var span = document.createElement(\"span\");\n//       span.textContent = \"A <span> element.\";\n//       document.body.appendChild(span);\n//       break;\n//     case \"complete\":\n//       // The page is fully loaded.\n//       console.log(\"The first CSS rule is: \" + document.styleSheets[0].cssRules[0].cssText);\n//       break;\n//   }\n// onreadystatechange, readystate.\n// crap man.\n// do the chrome extension? get out and see?\n// configure the run-time.\n// hey! we do not have the same font.\n// // is it HTML?\n// \"*://*\",\n// \"http://*\",\n// \"https://*\",\n// \"ws://*\",\n// \"wss://*\",\n// \"ftp://*\",\n// \"ftps://*\",\n// \"data://*\",\n// \"file://*\",\n// must either: must either [must either [be one of [\"clipboardRead\", \"clipboardWrite\", \"geolocation\", \"idle\", \"notifications\"], be one of [\"bookmarks\"], be one of [\"find\"], be one of [\"history\"], be one of [\"me"
        },
        {
            "comment": "This code is checking if the given APIs or URL patterns match any of the specified categories. It ensures that the provided API or URL matches one of the allowed options, including specific APIs like \"search\", \"activeTab\", \"downloads\", etc., or general URL patterns like \"<all_urls>\", \"file://\", \"resource://\", and others.",
            "location": "\"/media/root/Prima/works/generated_docs/lazero_doc/src/bootstrap/keller/src/ced/borderify.js\":223-223",
            "content": "nus.overrideContext\"], be one of [\"search\"], be one of [\"activeTab\", \"tabs\", \"tabHide\"], be one of [\"browserSettings\"], be one of [\"cookies\"], be one of [\"downloads\", \"downloads.open\"], be one of [\"topSites\"], be one of [\"webNavigation\"], or be one of [\"webRequest\", \"webRequestBlocking\"]], be one of [\"alarms\", \"mozillaAddons\", \"storage\", \"unlimitedStorage\"], be one of [\"browsingData\"], be one of [\"captivePortal\"], be one of [\"devtools\"], be one of [\"identity\"], be one of [\"menus\", \"contextMenus\"], be one of [\"pkcs11\"], be one of [\"geckoProfiler\"], be one of [\"sessions\"], be one of [\"contextualIdentities\"], be one of [\"dns\"], be one of [\"management\"], be one of [\"privacy\"], be one of [\"proxy\"], be one of [\"nativeMessaging\"], be one of [\"telemetry\"], be one of [\"theme\"], or match the pattern /^experiments(\\.\\w+)+$/], or must either [be one of [\"<all_urls>\"], must either [match the pattern /^(https?|wss?|file|ftp|\\*):\\/\\/(\\*|\\*\\.[^*/]+|[^*/]+)\\/.*$/, or match the pattern /^file:\\/\\/\\/.*$/], or match the pattern /^resource:\\/\\/(\\*|\\*\\.[^*/]+|[^*/]+)\\/.*$|^about:/]"
        },
        {
            "comment": "This code snippet is likely specific to Firefox browser, indicating that it contains platform-specific functionality or may have issues on other browsers.",
            "location": "\"/media/root/Prima/works/generated_docs/lazero_doc/src/bootstrap/keller/src/ced/borderify.js\":224-224",
            "content": "// this is specific to FIREFOX."
        }
    ]
}