{
    "summary": "The code presents a custom dataset class, `CustomDatasetFromCsvData`, which reads data from CSV files and applies transforms to retrieve images and labels. It also offers label indexing and length functions.",
    "details": [
        {
            "comment": "The code defines a custom dataset class that reads image paths and labels from a CSV file. It applies transforms to the images, stores the information in numpy arrays, and calculates the length of the dataset based on the number of rows in the CSV file.",
            "location": "\"/media/root/Prima/works/generated_docs/lazero_doc/src/bootstrap/legacy/concentration/brainfuck/the_new_pack/custom_dataset_from_csv.py\":0-29",
            "content": "import pandas as pd\nimport numpy as np\nfrom PIL import Image\nfrom torchvision import transforms\nfrom torch.utils.data.dataset import Dataset  # For custom datasets\nclass CustomDatasetFromCsvLocation(Dataset):\n    def __init__(self, csv_path):\n        # super(self).__init__()\n        \"\"\"\n        Custom dataset example for reading image locations and labels from csv\n        but reading images from files\n        Args:\n            csv_path (string): path to csv file\n        \"\"\"\n        # Transforms\n        self.to_tensor = transforms.ToTensor()\n        # Read the csv file\n        self.data_info = pd.read_csv(csv_path, header=None)\n        # First column contains the image paths\n        self.image_arr = np.asarray(self.data_info.iloc[:, 0])\n        # Second column is the labels\n        self.label_arr = np.asarray(self.data_info.iloc[:, 1])\n        # Third column is for an operation indicator\n        self.operation_arr = np.asarray(self.data_info.iloc[:, 2])\n        # Calculate len\n        self.data_len = len(self.data_info.index)"
        },
        {
            "comment": "The method `__getitem__` retrieves an image and its corresponding label from a custom dataset. It first gets the image name, opens the image, checks if there's an operation, applies it if necessary, converts the image to a tensor, and then returns the image tensor and the image label. The `CustomDatasetFromCsvData` class serves as an example for reading data from a CSV file and requires a `csv_path`, `height`, `width`, and optional transformations.",
            "location": "\"/media/root/Prima/works/generated_docs/lazero_doc/src/bootstrap/legacy/concentration/brainfuck/the_new_pack/custom_dataset_from_csv.py\":31-66",
            "content": "    def __getitem__(self, index):\n        # Get image name from the pandas df\n        single_image_name = self.image_arr[index]\n        # Open image\n        img_as_img = Image.open(single_image_name)\n        # Check if there is an operation\n        some_operation = self.operation_arr[index]\n        # If there is an operation\n        if some_operation:\n            # Do some operation on image\n            # ...\n            # ...\n            pass\n        # Transform image to tensor\n        img_as_tensor = self.to_tensor(img_as_img)\n        # Get label(class) of the image based on the cropped pandas column\n        single_image_label = self.label_arr[index]\n        return (img_as_tensor, single_image_label)\n    def __len__(self):\n        return self.data_len\nclass CustomDatasetFromCsvData(Dataset):\n    def __init__(self, csv_path, height, width, transform=None):\n        # get some super.\n        # super().__init__()\n        # no shit.\n        \"\"\"\n        Custom dataset example for reading data from csv\n        Args:\n            csv_path (string): path to csv file"
        },
        {
            "comment": "The class initializes the dataset from a CSV file and allows retrieving images with their corresponding labels. The __getitem__ method reads the image data, converts it to grayscale, reshapes it, and applies transforms if necessary before returning the tensor and label.",
            "location": "\"/media/root/Prima/works/generated_docs/lazero_doc/src/bootstrap/legacy/concentration/brainfuck/the_new_pack/custom_dataset_from_csv.py\":67-90",
            "content": "            height (int): image height\n            width (int): image width\n            transform: pytorch transforms for transforms and tensor conversion\n        \"\"\"\n        self.data = pd.read_csv(csv_path)\n        self.labels = np.asarray(self.data.iloc[:, 0])\n        self.height = height\n        self.width = width\n        self.transform = transform\n    def __getitem__(self, index):\n        single_image_label = self.labels[index]\n        # Read each 784 pixels and reshape the 1D array ([784]) to 2D array ([28,28])\n        img_as_np = np.asarray(self.data.iloc[index][1:]).reshape(28, 28).astype('uint8')\n        # Convert image from numpy array to PIL image, mode 'L' is for grayscale\n        img_as_img = Image.fromarray(img_as_np)\n        img_as_img = img_as_img.convert('L')\n        # Transform image to tensor\n        if self.transform is not None:\n            img_as_tensor = self.transform(img_as_img)\n        # Return image and the label\n        return (img_as_tensor, single_image_label)\n    def indices_to_labels(self,inds):"
        },
        {
            "comment": "This code defines two methods, one for retrieving labels from indices and another for getting the length of the dataset based on its index length.",
            "location": "\"/media/root/Prima/works/generated_docs/lazero_doc/src/bootstrap/legacy/concentration/brainfuck/the_new_pack/custom_dataset_from_csv.py\":91-94",
            "content": "        return [self.labels[x] for x in inds]\n    def __len__(self):\n        return len(self.data.index)"
        }
    ]
}