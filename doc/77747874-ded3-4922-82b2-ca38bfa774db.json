{
    "summary": "The Bird and Pipe objects handle player controls, movement, game logic, sound effects, and event listeners. Code manages game rendering, pipe generation, score display, pause buttons, medals, high scores, and implements a \"stop\" function to halt recursive run method calls and clear timers upon pause or reset.",
    "details": [
        {
            "comment": "Initializes and defines a Bird object with properties, methods to handle its movement, collision detection, and positioning. The Bird object is responsible for drawing itself on the canvas, adjusting its position based on gravity, checking if it collides with pipes, and handling game over conditions.",
            "location": "\"/media/root/Prima/works/generated_docs/lazero_doc/src/bootstrap/FlappyBird/js/game.js\":0-53",
            "content": "\ufeffvar canvas = document.getElementById(\"main\"),\n\tctx = main.getContext(\"2d\");\nfunction Bird() {\n\tthis.left = 120;\n\tthis.top = 250;\n\tthis.width = 34;\n\tthis.height = 24;\n\tthis.g = 1;\n\tthis.timer = null;\n\tthis.timer2 = null;\n\tthis.pic = gameMonitor.im.createImage('images/bird.png');\n\tthis.draw = function() {\n\t\tctx.drawImage(this.pic, this.left, this.top, this.width, this.height);\n\t}\n\tthis.setPosition = function() {\n\t\tvar _this = this;\n\t\tthis.timer = setInterval(function(){\n\t\t\t_this.top -= 5;\n\t\t},1000/60);\n\t\tthis.timer2 = setTimeout(function() {\n\t\t\tclearInterval(_this.timer);\n\t\t},300);\n\t}\n\tthis.gravity = function() {\n\t\tthis.g *= 1.06; \n\t\tthis.top += this.g;\n\t}\n\tthis.isStop = function() {\n\t\tif(this.top < 0) {\n\t\t\tthis.top = 10;\n\t\t}else if(this.top > 480) {\n\t\t\tgameMonitor.stop();\n\t\t}\n\t}\n\tthis.reset = function() {\n\t\tclearInterval(this.timer);\n\t\tclearTimeout(this.timer2);\n\t}\n\t//\u78b0\u649e\u68c0\u6d4b\n\tthis.isCollision = function(pipeList) {\n\t\tvar _this = this;\n\t\t//\u78b0\u5230\u4e0a\u4e0b\u8fb9\u754c,\u6e38\u620f\u7ed3\u675f\n\t\tif(_this.top < 0 || this.top > 480) {\n\t\t\tgameMonitor.gameOver();\n\t\t}else {\n\t\t\tfor(var i = 0,l = pipeList.length; i < l; i++){"
        },
        {
            "comment": "The code checks for collision between the game object (_this) and each pipe (pipeList[i]) on the screen. If there is a collision, it determines if the game object passed through the pipe or hit it, and accordingly increments the score or ends the game. The Pipe constructor initializes new pipes with specific properties like position, size, and height, and provides draw() and move() methods to update and render them on the canvas.",
            "location": "\"/media/root/Prima/works/generated_docs/lazero_doc/src/bootstrap/FlappyBird/js/game.js\":54-87",
            "content": "\t\t\t\tvar p = pipeList[i];\n\t\t\t\tif(p && p.isPass == false) {\n\t\t\t\t\tif(p.left <= (_this.left + _this.width) && p.left > (_this.left - p.width)) {\n\t\t\t\t\t\tif(_this.top < p.height || _this.top > (p.height + gameMonitor.gapHeight - _this.height)) {\n\t\t\t\t\t\t\tsetTimeout(function() {\n\t\t\t\t\t\t\t\tgameMonitor.gameOver();\n\t\t\t\t\t\t\t},0);\t\n\t\t\t\t\t\t}\n\t\t\t\t\t}else if(p.left < (_this.left - p.width)) {\n\t\t\t\t\t\tgameMonitor.s_point.play();//\u64ad\u653e\u97f3\u6548\n\t\t\t\t\t\tgameMonitor.score += 1;\n\t\t\t\t\t\tp.isPass = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}  \nfunction Pipe(id) {\n\tthis.id = id;\n\tthis.isPass = false;\n\tthis.left = gameMonitor.bgWidth;\n\tthis.top = 0;\n\tthis.width = 50;\n\tthis.height = getRandom(100,200);\n\tthis.pic_down = gameMonitor.im.createImage('images/pipe_down.png');\n\tthis.pic_up = gameMonitor.im.createImage('images/pipe_up.png');\n}\nPipe.prototype.draw = function() {\n\tctx.drawImage(this.pic_down, this.left, this.top, this.width, this.height); //\u4e0a\u7ba1\u9053       \t\n\tctx.drawImage(this.pic_up, this.left, gameMonitor.gapHeight + this.height, this.width, 280);//\u4e0b\u7ba1\u9053        \t\n}\nPipe.prototype.move = function() {"
        },
        {
            "comment": "This code handles player's left movement and out-of-bounds detection, provides a random number function, and initializes image loading. It also checks for iPhone devices and potentially sets some device-specific variables or triggers device-dependent actions.",
            "location": "\"/media/root/Prima/works/generated_docs/lazero_doc/src/bootstrap/FlappyBird/js/game.js\":88-126",
            "content": "\tthis.left -= gameMonitor.SpeedX;\n\tif(this.left < -50) {\n\t\tgameMonitor.pipeList[this.id] = null;\n\t}//\u51fa\u754c\u540e\u4e0d\u518d\u6e32\u67d3\n}\n//\u83b7\u5f97start\u5230end\u7684\u968f\u673a\u6570\nfunction getRandom(start, end) {\n\tvar intval = end - start;\n\treturn Math.round(Math.random() * intval + start);\n}\n//\u56fe\u7247\u52a0\u8f7d\u5668\nfunction ImageMonitor(){\n\tvar imgArray = [];\n\treturn {\n\t\tcreateImage : function(src){\n\t\t\treturn typeof imgArray[src] != 'undefined' ? imgArray[src] : (imgArray[src] = new Image(), imgArray[src].src = src, imgArray[src])\n\t\t},\n\t\tloadImage : function(arr, callback){\n\t\t\tfor(var i=0,l=arr.length; i<l; i++){\n\t\t\t\tvar img = arr[i];\n\t\t\t\timgArray[img] = new Image();\n\t\t\t\timgArray[img].onload = function(){\n\t\t\t\t\tif(i==l-1 && typeof callback=='function'){\n\t\t\t\t\t\tcallback();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\timgArray[img].src = img\n\t\t\t}\n\t\t}\n\t}\n}\n/*function isIphone(){//\u5224\u65ad\u662f\u5426\u662f\u79fb\u52a8\u8bbe\u5907\n\tvar sUserAgent= navigator.userAgent.toLowerCase(),\n\tbIsIpad= sUserAgent.match(/ipad/i) == \"ipad\",\n\tbIsIphoneOs= sUserAgent.match(/iphone os/i) == \"iphone os\",\n\tbIsMidp= sUserAgent.match(/midp/i) == \"midp\",\n\tbIsUc7= sUserAgent.match(/rv:1.2.3.4/i) == \"rv:1.2.3.4\","
        },
        {
            "comment": "The code is detecting if the user is using a mobile device or a PC. It uses the navigator.userAgent to determine the user agent and checks for specific strings related to popular mobile devices. If any of these strings are found, the function returns false (indicating it's a mobile device). The code also includes an event utilities object with addEvent and removeEvent functions for adding and removing events to/from elements.",
            "location": "\"/media/root/Prima/works/generated_docs/lazero_doc/src/bootstrap/FlappyBird/js/game.js\":127-157",
            "content": "\tbIsUc= sUserAgent.match(/ucweb/i) == \"ucweb\";\n\treturn (bIsIpad || bIsIphoneOs || bIsMidp || bIsUc7 || bIsUc);\n}*/\nfunction IsPC() \n{ \n    var userAgentInfo = navigator.userAgent; \n    var Agents = new Array(\"Android\", \"iPhone\", \"SymbianOS\", \"Windows Phone\", \"iPad\", \"iPod\", \"Mobile\"); \n    var flag = true; \n    for (var v = 0; v < Agents.length; v++) { \n        if (userAgentInfo.indexOf(Agents[v]) > 0) { flag = false; break; } \n    } \n    return flag; \n} \n//\u65f6\u95f4\u7ed1\u5b9a\u3001\u89e3\u7ed1\nvar EventUtil = {\n    addEvent: function(element, type, handler){\n        if (element.addEventListener){\n            element.addEventListener(type, handler, false);\n        } else if (element.attachEvent){\n            element.attachEvent(\"on\" + type, handler);\n        } else {\n            element[\"on\" + type] = handler;\n        }\n    },\n\tremoveEvent: function(element, type, handler){\n        if (element.removeEventListener){\n            element.removeEventListener(type, handler, false);\n        } else if (element.detachEvent){\n            element.detachEvent(\"on\" + type, handler);"
        },
        {
            "comment": "This code handles game logic and events for a Flappy Bird-like game. It initializes variables, sets up event handlers, manages game objects (bird, pipes), controls game state (paused/running), and monitors time intervals for animation and score updates. It also manages audio effects associated with different game events.",
            "location": "\"/media/root/Prima/works/generated_docs/lazero_doc/src/bootstrap/FlappyBird/js/game.js\":158-210",
            "content": "        } else {\n            element[\"on\" + type] = null;\n        }\n    }\n}\n//\u83b7\u53d6\u70b9\u51fb\u7684\u5750\u6807\nfunction getEventPosition(ev){\n  var x, y;\n  if(ev.touches) {\n\tx = ev.touches[0].pageX;\n    y = ev.touches[0].pageY;\n  }else if (ev.layerX || ev.layerX == 0) {\n    x = ev.layerX;\n    y = ev.layerY;\n  } else if (ev.offsetX || ev.offsetX == 0) { // Opera\n    x = ev.offsetX;\n    y = ev.offsetY;\n  }\n  return {x: x, y: y};\n}\nvar gameMonitor = {\n\tbgWidth: 320,\n\tbgHeight: 480,\n\tgapHeight: 100,//\u4e0a\u4e0b\u7ba1\u9053\u4e4b\u95f4\u7684\u8ddd\u79bb\n\tgapPipe: 2500,//\u7ba1\u9053\u5faa\u73af\u751f\u6210\u95f4\u9694 ms\n\tSpeedX: 1.5,//\u7ba1\u9053\u5de6\u79fb\u901f\u5ea6\n\tintval: 1000/60,//\u91cd\u7ed8\u901f\u5ea6  ms\n\tscore: 0,//\u5f97\u5206\n\tbestScore: 0,\n\tlastScore: 0,\n\tid: 0,//\u4e00\u7ec4\u7ba1\u9053\u7684\u552f\u4e00\u6807\u793a\n\tpipeList: [],//\u7ba1\u9053\u5bf9\u8c61\u7684\u6570\u7ec4\n\tisCover: true,\n\tisReady: false,\n\tisControl: true,//\u662f\u5426\u53ef\u4ee5\u70b9\u51fb\u6682\u505c\u6216\u8fd0\u884c\n\tisPause: false,//\u662f\u5426\u662f\u6682\u505c\u72b6\u6001\n\ttimer: null,//\u6574\u4f53run\u7684\u5b9a\u65f6\u5668\n\tpipe_timer: null,//\u7ba1\u9053\u5faa\u73af\u751f\u6210\u7684\u5b9a\u65f6\u5668\n\tbird: null,\n\thandler1: null,\n\thandler2: null,\n\ts_die: null,//\u97f3\u6548\u5bf9\u8c61\n\ts_wing: null,//\u97f3\u6548\u5bf9\u8c61\n\ts_point: null,//\u97f3\u6548\u5bf9\u8c61\n\ts_hit: null,//\u97f3\u6548\u5bf9\u8c61\n\teventType: {\n\t\tstart : IsPC() ? 'mousedown' : 'touchstart'\n\t},\n\tim: new ImageMonitor(),\n\tgetTime: function() {\n\t\tvar myDate = new Date();"
        },
        {
            "comment": "The code initializes the game by loading images, setting up backgrounds based on time (day or night), drawing the background, initializing sounds, and setting up event listeners for buttons.",
            "location": "\"/media/root/Prima/works/generated_docs/lazero_doc/src/bootstrap/FlappyBird/js/game.js\":211-243",
            "content": "\t\treturn myDate.getHours();\n\t},//\u83b7\u53d6\u5f53\u524d\u5c0f\u65f6\u6570\uff0c\u5224\u65ad\u7528\u767d\u5929\u8fd8\u662f\u9ed1\u591c\u80cc\u666f\n\tinit: function() {\n\t\tgameMonitor.im.loadImage(['images/bg_day.png','images/bg_night.png','images/button_pause.png','images/button_resume.png','images/bird.png', 'images/tutorial.png','images/button_play.png','images/title.png','images/text_ready.png','images/pipe_down.png','images/pipe_up.png','images/score_panel.png','images/text_game_over.png']);\n\t\tvar _this = this;\n\t\tvar bg = new Image();\n\t\t_this.bg = bg;\n\t\tbg.onload = function(){\n          \tctx.drawImage(bg, 0, 0, _this.bgWidth, _this.bgHeight);          \t\n\t\t}\n\t\tif(_this.getTime() < 19 && _this.getTime() > 6) {\n\t\t\tbg.src = 'images/bg_day.png';\t\n\t\t}else {\n\t\t\tbg.src = 'images/bg_night.png';\n\t\t}\n\t\tsetTimeout(function() {\n\t\t\t_this.drawCover();\t\n\t\t},200);\n\t\t_this.initSound();\n\t\t//\u521d\u59cb\u5316\u97f3\u6548\n\t\t//document.getElementsByClassName(\"author\")[0].innerHTML = navigator.userAgent;\n\t\t//\u5f00\u59cb\u6e38\u620f\u6309\u94ae\u76d1\u542c\n\t\t_this.coverListener();\t\t\n\t},\n\tcoverListener:function() {\n\t\t_this = this;\n\t\t_this.handler2 = function(e){\n\t\t\tvar theEvent = window.event || e;"
        },
        {
            "comment": "This code handles the logic for pausing and resuming the game when the player clicks a pause button. It checks if the click is within the specified coordinates, toggles the pause state, plays a sound effect, and updates the game accordingly.",
            "location": "\"/media/root/Prima/works/generated_docs/lazero_doc/src/bootstrap/FlappyBird/js/game.js\":244-289",
            "content": "\t\t\tvar p = getEventPosition(theEvent);\n\t\t\tif(p.x > 100 && p.x < 216 && p.y > 350 && p.y < 420) {\n\t\t\t\t_this.isControl = true;\n\t\t\t\t_this.bird = new Bird();\n\t\t\t\t_this.s_click.play();//\u64ad\u653e\u97f3\u6548\n\t\t\t\t_this.reset();\n\t\t\t\t_this.run();\n\t\t\t\t//\u5faa\u73af\u751f\u6210\u7ba1\u9053\n\t\t\t\t_this.startPipe();\n\t\t\t\tEventUtil.removeEvent(main, _this.eventType.start,_this.handler2);//\u70b9\u51fb\u4e4b\u540e\u5c31\u79fb\u9664\u8be5\u6309\u94ae\u70b9\u51fb\n\t\t\t\t_this.initListener();\t\t\t\t\n\t\t\t}\n\t\t}\n\t\tEventUtil.addEvent(main, _this.eventType.start, _this.handler2);\n\t},\n\tinitListener: function() {\n\t\tvar _this = this;\n\t\t_this.handler1 = function(e){\n\t\t\tvar theEvent = window.event || e;\n\t\t\tvar p = getEventPosition(theEvent);\n\t\t\t//\u5224\u65ad\u662f\u5426\u70b9\u51fb\u6682\u505c\u6309\u94ae\n\t\t\tif(p.x > 270 && p.x < 296 && p.y > 20 && p.y < 48) {\n\t\t\t\tif(_this.isControl == true) {\n\t\t\t\t\tif(_this.isPause == false) {\n\t\t\t\t\t\t_this.s_click.play();\n\t\t\t\t\t\t_this.isPause = true;\n\t\t\t\t\t\tsetTimeout(function() {\t\t\t\t\t\n\t\t\t\t\t\t\tgameMonitor.stop();\t\n\t\t\t\t\t\t\tgameMonitor.drawPause(_this.isPause);\t\t\t\t\t\n\t\t\t\t\t\t},1000/60);\t\n\t\t\t\t\t}else {\n\t\t\t\t\t\t_this.s_click.play();\n\t\t\t\t\t\t_this.isPause = false;\n\t\t\t\t\t\tgameMonitor.run();\n\t\t\t\t\t\tgameMonitor.startPipe();"
        },
        {
            "comment": "This code is responsible for the game loop and event handling in a Flappy Bird-like game. It handles the bird's movement, background drawing, pipe drawing and movement, pause button functionality, score display, and sound effects. The event handler listens to user actions and reacts accordingly.",
            "location": "\"/media/root/Prima/works/generated_docs/lazero_doc/src/bootstrap/FlappyBird/js/game.js\":290-340",
            "content": "\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}else {\n\t\t\t\t_this.s_wing.play();//\u64ad\u653e\u97f3\u6548\n\t\t\t\t_this.bird.reset();//\u6e05\u7a7a\u4e0a\u6b21\u70b9\u51fb\u4e8b\u4ef6\n\t\t\t\t_this.bird.setPosition();//\u9e1f\u8fdb\u884c\u4f4d\u79fb\n\t\t\t\t_this.bird.g = 1;//\u91cd\u7f6eg\t\n\t\t\t}\n\t\t};\n\t\tEventUtil.addEvent(main, _this.eventType.start, _this.handler1);\n\t},\n\trun: function() {\n\t\tvar _this = this;\n\t\tctx.clearRect(0, 0, _this.bgWidth, _this.bgHeight);\n\t\t_this.drawBg();//\u7ed8\u5236\u80cc\u666f\n\t\t//\u5faa\u73af\u7ed8\u5236\u7ba1\u9053\u6570\u7ec4\n\t\tfor(var i = 0,l = this.pipeList.length;i < l;i++) {\n\t\t\tvar p = _this.pipeList[i];\n\t\t\tif(p){\n\t\t\t\tp.draw();\n\t\t\t\tp.move();\n\t\t\t}\n\t\t}\n\t\t//\u6682\u505c\u5f00\u5173\u63a7\u5236\t\t\n\t\t_this.drawPause(_this.isPause);\n\t\t//\u5206\u6570\n\t\t_this.drawScore(_this.score,50,140,100,'#fff');\t\n\t\t//\u7ed8\u5236\u9e1f\n\t\t_this.bird.draw();//\u91cd\u7ed8\u9e1f\n\t\t_this.bird.gravity();\n\t\t//\u78b0\u649e\u68c0\u6d4b\n\t\t_this.bird.isCollision(_this.pipeList);\n\t\t_this.timer = setTimeout(function() {\n\t\t\t_this.run();\n\t\t},_this.intval);\n\t\t//requestAnimationFrame(_this.run(ctx));\t\n\t},\n\t//\u521d\u59cb\u5316\u97f3\u6548\n\tinitSound: function() {\n\t\tthis.s_click = new Audio(\"sound/sfx_point.ogg\");\n\t\tthis.s_wing = new Audio(\"sound/sfx_wing.ogg\");\n\t\tthis.s_point = new Audio(\"sound/sfx_point.ogg\");\n\t\tthis.s_hit = new Audio(\"sound/sfx_hit.ogg\");"
        },
        {
            "comment": "This code contains several functions related to game rendering and management. It starts a pipe generation loop, draws the background, handles drawing pipes, covers with an image, displays score, and applies text formatting for scores including shadows.",
            "location": "\"/media/root/Prima/works/generated_docs/lazero_doc/src/bootstrap/FlappyBird/js/game.js\":341-379",
            "content": "\t},\n\t//\u5f00\u59cb\u5faa\u73af\u751f\u6210\u7ba1\u9053\n\tstartPipe: function() {\n\t\tvar _this = this;\n\t\t_this.pipe_timer = setInterval(function() {\n\t\t\tvar id = _this.pipeList.length;\n\t\t\t_this.drawPipe(id);\n\t\t},_this.gapPipe);\t\n\t},\n\t//\u7ed8\u5236\u80cc\u666f\n\tdrawBg: function() {\n\t\tctx.drawImage(this.bg, 0, 0, this.bgWidth, this.bgHeight);\n\t},\n\tdrawPipe: function(id) {\n\t\tvar p = new Pipe(id);\n\t\tthis.pipeList.push(p);\n\t},\n\t//\u7ed8\u5236\u5c01\u9762\n\tdrawCover: function() {\n\t\tsetTimeout(function() {\n\t\t\tctx.drawImage(gameMonitor.im.createImage(\"images/title.png\"), 80, 100, 178, 48);\n\t\t\tctx.drawImage(gameMonitor.im.createImage(\"images/button_play.png\"), 100, 350, 116, 70);\n\t\t\tctx.drawImage(gameMonitor.im.createImage(\"images/tutorial.png\"), 100, 200, 114, 98);\n\t\t},1000/60);\t\n\t},\n\t//\u7ed8\u5236\u5f97\u5206\n\tdrawScore: function(score, fontSize, left, top, color) {\n\t\tctx.save();\n\t\tctx.font = \"Bold \"+ fontSize +\"px Arial\";\n\t\tctx.textAlign = \"left\";\n\t\tctx.fillStyle = color;\n\t\tctx.shadowOffsetX = 3; // \u8bbe\u7f6e\u6c34\u5e73\u4f4d\u79fb\n\t\tctx.shadowOffsetY = 3; // \u8bbe\u7f6e\u5782\u76f4\u4f4d\u79fb\n\t\tctx.shadowBlur = 3; // \u8bbe\u7f6e\u6a21\u7cca\u5ea6\n\t\tctx.shadowColor = \"black\"; // \u8bbe\u7f6e\u9634\u5f71\u989c\u8272\n\t\tctx.fillText(score,left,top);"
        },
        {
            "comment": "The code snippet contains a gameOver function that stops the game, draws game over screen elements, and updates high scores. It also changes controls to prevent further gameplay, drawing the game over text image, and plays an audio effect. After a delay, it restores the background and redraws other elements. It switches event handlers for the start button as well.",
            "location": "\"/media/root/Prima/works/generated_docs/lazero_doc/src/bootstrap/FlappyBird/js/game.js\":380-412",
            "content": "\t\tctx.restore();\n\t},\n\tgameOver: function() {\n\t\tvar _this = this;\n\t\t_this.isControl = false;//\u6e38\u620f\u7ed3\u675f\u540e\u4e0d\u53ef\u4ee5\u70b9\u51fb\u6682\u505c\u6216\u8fd0\u884c\n\t\t//\u66f4\u65b0\u6700\u9ad8\u5206\n\t\t_this.s_hit.play();//\u64ad\u653e\u97f3\u6548\n\t\tsetTimeout(function() {\n\t\t\tgameMonitor.stop();\n\t\t\tgameMonitor.drawGameOver();\n\t\t\tsetTimeout(function() {\n\t\t\t\tgameMonitor.drawBg();\n\t\t\t\tctx.drawImage(gameMonitor.im.createImage(\"images/title.png\"), 80, 100, 178, 48);\n\t\t\t\tgameMonitor.drawScorePanel();\n\t\t\t\tgameMonitor.drawMedal();\n\t\t\t\tgameMonitor.drawScore(_this.score,20,230,250,'#fff');\n\t\t\t\tgameMonitor.drawScore(_this.bestScore,20,230,295,'#fff');\n\t\t\t\tctx.drawImage(gameMonitor.im.createImage(\"images/button_play.png\"), 100, 350, 116, 70);\n\t\t\t\tif(_this.bestScore < _this.score) {\n\t\t\t\t\t_this.bestScore = _this.score;\n\t\t\t\t}\n\t\t\t\t_this.lastScore = _this.score;\n\t\t\t\tEventUtil.removeEvent(main, _this.eventType.start, _this.handler1);\n\t\t\t\tEventUtil.addEvent(main, _this.eventType.start, _this.handler2);\n\t\t\t},1000);\n\t\t},1000/60);//\u65e0\u89e3\n\t},\n\t//\u7ed8\u5236gameover\n\tdrawGameOver: function() {\n\t\tctx.drawImage(gameMonitor.im.createImage('images/text_game_over.png'), 50, 200, 204, 54);"
        },
        {
            "comment": "This code defines various functions for drawing pause buttons, score panels, and medals in a game. The \"stop\" function is used to stop the recursive calling of the run method by using setTimeout.",
            "location": "\"/media/root/Prima/works/generated_docs/lazero_doc/src/bootstrap/FlappyBird/js/game.js\":413-445",
            "content": "\t},\n\t//\u7ed8\u5236\u6682\u505c\u6309\u94ae\n\tdrawPause: function(bol) {\n\t\tif(bol == false) {\n\t\t\tctx.drawImage(gameMonitor.im.createImage('images/button_pause.png'), 270, 20, 26, 28);\n\t\t}else {\n\t\t\tctx.drawImage(gameMonitor.im.createImage('images/button_resume.png'), 270, 20, 26, 28);\n\t\t}\t\n\t},\n\t//\u7ed8\u5236\u5206\u6570\u724c\n\tdrawScorePanel: function() {\n\t\tctx.drawImage(gameMonitor.im.createImage('images/score_panel.png'), 45, 200, 238, 126);\n\t},\n\t//\u7ed8\u5236\u5956\u724c\n\tdrawMedal: function() {\n\t\tvar _this = this;\n\t\t//\u5224\u65ad\u6e38\u620f\u7ed3\u675f\u65f6\u7ed9\u54ea\u4e2a\u5956\u724c\n\t\tif(_this.score > _this.bestScore) {\n\t\t\tctx.drawImage(gameMonitor.im.createImage('images/medals_1.png'), 76, 245, 44, 44);\n\t\t}else if(_this.score > _this.lastScore && _this.score > 20) {\n\t\t\tctx.drawImage(gameMonitor.im.createImage('images/medals_2.png'), 76, 245, 44, 44);\n\t\t}else if(_this.score > 10) {\n\t\t\tctx.drawImage(gameMonitor.im.createImage('images/medals_3.png'), 76, 245, 44, 44);\n\t\t}else {\n\t\t\tctx.drawImage(gameMonitor.im.createImage('images/medals_0.png'), 76, 245, 44, 44);\n\t\t}\t\n\t},\n\t//\u505c\u6b62run\u65b9\u6cd5\u7684\u9012\u5f52\u8c03\u7528\n\tstop: function() {\n\t\tvar _this = this;\n\t\tsetTimeout(function(){"
        },
        {
            "comment": "The code clears the timeout for the game's timer and pipe movement timer when paused, resets the game by clearing the pipe list, resetting score to 0, and nullifying timers on initiation of the game monitor.",
            "location": "\"/media/root/Prima/works/generated_docs/lazero_doc/src/bootstrap/FlappyBird/js/game.js\":446-457",
            "content": "\t\t\tclearTimeout(_this.timer);\n\t\t\tclearTimeout(_this.pipe_timer);\t\t\n\t\t}, 0);\n\t},\n\treset: function() {\n\t\tthis.pipeList = [];\n\t\tthis.score = 0;\n\t\tthis.timer = null;\n\t\tthis.pipe_timer = null;\n\t}\n}\ngameMonitor.init();"
        }
    ]
}