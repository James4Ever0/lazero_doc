{
    "summary": "This Flask application sets up a WebSocket server that handles messages, sends them back to clients with a delay, and uses gevent's green threads for better performance. The server runs on localhost at port 5000 and serves forever.",
    "details": [
        {
            "comment": "The code imports necessary modules and defines the Flask application with WebSocket support. It sets up a socket route for handling incoming messages, continuously sends \"1+250\" back to the client until the WebSocket connection is closed, and patches all threading calls to use gevent's green threads for better performance.",
            "location": "\"/media/root/Prima/works/generated_docs/lazero_doc/src/bootstrap/keller/src/flasko.py\":0-38",
            "content": "# encoding: utf-8\n\"\"\"\n@version: v1.0\n@author: W_H_J\n@license: Apache Licence\n@contact: 415900617@qq.com\n@software: PyCharm\n@file: flaskWebSocket.py\n@time: 2019/2/19 10:20\n@describe: flask_sockets \u5b9e\u73b0websocket\n\"\"\"\nimport json\nimport sys\nimport os\nfrom flask_sockets import Sockets\nimport time\n#from threading import Thread\nfrom gevent import monkey\nfrom flask import Flask, request\nfrom gevent import pywsgi\nfrom geventwebsocket.handler import WebSocketHandler\nsys.path.append(os.path.abspath(os.path.dirname(__file__) + '/' + '..'))\nsys.path.append(\"..\")\nmonkey.patch_all()\napp = Flask(__name__)\nsockets = Sockets(app)\nnow = time.strftime('%Y-%m-%d-%H-%M-%S', time.localtime(time.time()))\n@sockets.route('/',defaults={'path': ''})  # \u6307\u5b9a\u8def\u7531\n@sockets.route('/<path:path>')\ndef echo_socket(ws,path):\n    while not ws.closed:\n        print(\"WS: \",path)\n        ws.send(\"1+250\")  # \u56de\u4f20\u7ed9clicent\n        \"\"\" \u670d\u52a1\u7aef\u5fc5\u987b\u63a5\u6536\u5230\u5ba2\u6237\u7aef\u53d1\u7684\u6d88\u606f\u624d\u80fd\u4fdd\u6301\u8be5\u670d\u52a1\u8fd0\u884c\uff0c\u5982\u679cws.receive()\u6ca1\u6709\u63a5\u6536\u5230\u5ba2\u6237\u7aef\u53d1\u9001\u7684\n         \u6d88\u606f\uff0c\u90a3\u4e48\u5b83\u4f1a\u5173\u95ed\u4e0e\u5ba2\u6237\u7aef\u5efa\u7acb\u7684\u94fe\u63a5\n         \u5e95\u5c42\u89e3\u91ca\uff1aRead and return a message from the stream. If `None` is returned, then"
        },
        {
            "comment": "Code snippet is a Flask application for WebSocket communication. It receives messages from clients, prints them, and sends the received message back to the client after a delay. If no message is received, it logs a \"no receive\" message. The server runs on localhost at port 5000 and serves forever upon execution.",
            "location": "\"/media/root/Prima/works/generated_docs/lazero_doc/src/bootstrap/keller/src/flasko.py\":39-65",
            "content": "        the socket is considered closed/errored.\n        \u6240\u4ee5\u5ba2\u6237\u7aef\u53ea\u5efa\u7acb\u8fde\u63a5\uff0c\u4e0d\u4e0e\u670d\u52a1\u7aef\u4ea4\u4e92\u901a\u4fe1\uff0c\u5219\u65e0\u6cd5\u5b9e\u73b0\u81ea\u7531\u901a\u4fe1\u72b6\u6001\uff0c\u4e4b\u540e\u5728\u5ba2\u6237\u7aef\u4ee3\u7801\u5904\u4f1a\u6709\u8be6\u7ec6\u5185\u5bb9\u3002\n         \"\"\"\n        message = ws.receive()  # \u63a5\u6536\u5230\u6d88\u606f\n        if message is not None:\n            print(\"%s receive msg==> \" % now, str(json.dumps(message)))\n            def sendmsg():\n                time.sleep(0.5)\n                ws.send(str(json.dumps(message)))  # \u56de\u4f20\u7ed9clicent\n            sendmsg()\n            #Thread(target=sendmsg,args=()).start()\n            \"\"\" \u5982\u679c\u5ba2\u6237\u7aef\u672a\u53d1\u9001\u6d88\u606f\u7ed9\u670d\u52a1\u7aef\uff0c\u5c31\u8c03\u7528\u63a5\u6536\u6d88\u606f\u65b9\u6cd5\uff0c\u5219\u4f1a\u5bfc\u81f4receive()\u63a5\u6536\u6d88\u606f\u4e3a\u7a7a\uff0c\u5173\u95ed\u6b64\u6b21\u8fde\u63a5 \"\"\"\n        else:\n            print(now, \"no receive\")\n@app.route('/',defaults={'path': ''})\n@app.route('/<path:path>')\ndef hello(path):\n    print(\"HTTP: \",path)\n    return 'Hello World! server start\uff01'\nif __name__ == \"__main__\":\n    server = pywsgi.WSGIServer(('localhost', 5000), app, handler_class=WebSocketHandler)\n    print('server start')\n    server.serve_forever()"
        }
    ]
}