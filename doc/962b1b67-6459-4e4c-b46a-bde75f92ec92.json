{
    "summary": "The code runs a curl command to fetch data from cn.bing.com and logs both standard output (stdout) and standard error (stderr) separately, buffering the output in sys.stdout. It uses select() to read available data on the file descriptors associated with stdout and stderr, reading 1024 bytes at a time until it encounters EOF, then removes the corresponding file descriptor from the readable dictionary.",
    "details": [
        {
            "comment": "The code runs a curl command to fetch data from cn.bing.com and logs both standard output (stdout) and standard error (stderr) separately, buffering the output in sys.stdout. It uses select() to read available data on the file descriptors associated with stdout and stderr, reading 1024 bytes at a time until it encounters EOF, then removes the corresponding file descriptor from the readable dictionary.",
            "location": "\"/media/root/Prima/works/generated_docs/lazero_doc/src/lego/mag.py\":0-19",
            "content": "#!/usr/bin/env python3\nimport os\nimport sys\nfrom select import select\nfrom subprocess import Popen, PIPE\n# it works somehow.\nwith Popen(['stdbuf', '-oL', '-e0', 'curl', 'cn.bing.com'],\n           stdout=PIPE, stderr=PIPE) as p:\n    readable = {\n        p.stdout.fileno(): sys.stdout.buffer, # log separately\n        p.stderr.fileno(): sys.stdout.buffer,\n    }\n    while readable:\n        for fd in select(readable, [], [])[0]:\n            data = os.read(fd, 1024) # read available\n            if not data: # EOF\n                del readable[fd]\n            else: \n                readable[fd].write(data)\n                readable[fd].flush()"
        }
    ]
}