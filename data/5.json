{
    "500": {
        "file_id": 81,
        "content": "# string first.\n#from numba import jit as  autojit\nimport multiprocessing\nimport time\n#@autojit(nopython=True, nogil=True)\ndef blackwhite(a,b,c=True):\n    byte=False\n    if type(a)==str:\n        assert type(b)==str\n    elif type(a)==bytes:\n        assert type(b)==bytes\n        byte=True\n    else:\n        return None\n    assert type(c)==bool\n    buf=\"\" if not byte else b\"\"\n    cb=[]\n    t=len(a)\n    for d in range(t):\n        x=a[d:d+1]\n        \"\"\"if d%1000==0:\n            print(\"byte\",d,\"total\",t)\"\"\"\n        if c:\n            if x in b:\n                buf+=x\n            elif (buf!=\"\" and not byte) or (buf!=b\"\" and byte):\n                cb.append(buf)\n                buf=\"\" if not byte else b\"\"\n        else:\n            if x not in b:\n                buf+=x\n            elif (buf!=\"\" and not byte) or (buf!=b\"\" and byte):\n                cb.append(buf)\n                buf=\"\" if not byte else b\"\"\n    if (buf!=\"\" and not byte) or (buf!=b\"\" and byte):\n        cb.append(buf)\n    return cb\n#@autojit(nopython=True, nogil=True)\ndef bw(a,b,d,e,c=True):",
        "type": "code",
        "location": "/bootstrap/blitx/cruncher.py:1-41"
    },
    "501": {
        "file_id": 81,
        "content": "The code defines two functions: \"blackwhite\" and \"bw\". These functions take in one or two parameters, either string or bytes, and return a list of strings/bytes where each element represents consecutive occurrences of the parameter value. The functions handle both string and byte input types and have an optional boolean flag for inverting the output. The code also includes conditional print statements for debugging purposes.",
        "type": "comment"
    },
    "502": {
        "file_id": 81,
        "content": "    s=blackwhite(a,b,c)\n    e[d]=s\n#@autojit(nopython=True, nogil=True)\ndef multibw(a,b,d,c=True):\n    byte=False\n    if type(a)==str:\n        assert type(b)==str\n    elif type(a)==bytes:\n        assert type(b)==bytes\n        byte=True\n    else:\n        return None\n    assert type(c)==bool \n    l=len(a)\n    assert d<=l and d>1 and type(d)==int\n    r=l%d\n    s=l//d\n    k=[(x*s,(x+1)*s) for x in range(d-1)]\n    k+=[((d-1)*s,d*s+r)]\n    #param={x:None for x in range(d)}\n    mgr = multiprocessing.Manager()\n    param = mgr.dict()\n    for x in range(d):\n        param[x]=None\n    jobs = [multiprocessing.Process(target=bw, args=(a[k[x][0]:k[x][1]],b,x,param,c)) for x in range(d)]\n    for j in jobs:\n        j.start()\n    for j in jobs:\n        j.join()\n    \"\"\"for x in range(d):\n        k0,k1=k[x]\n        print(k0,k1)\n        threading.Thread(target=bw,args=(a[k0:k1],b,x,param)).start()\n    while True:\n        su=sum([int(param[x]==None) for x in range(d)])\n        print(su)\n        if su==0:\n            break\n        else:\n            time.sleep(1)\"\"\"",
        "type": "code",
        "location": "/bootstrap/blitx/cruncher.py:42-82"
    },
    "503": {
        "file_id": 81,
        "content": "The code defines a function `multibw` that takes in two arrays (or strings/bytes) and performs parallel processing on each slice of the input arrays. It uses multiprocessing to split the work into multiple processes, each handling a portion of the input arrays. The code also provides an alternative threading-based implementation within comments. The function returns None if the input types are incorrect or if the specified dimension `d` is invalid.",
        "type": "comment"
    },
    "504": {
        "file_id": 81,
        "content": "    result=[param[x] for x in range(d)]\n    result=[x for y in result for x in y]\n    # can increase complexity.\n    return result\n    #print(result)\n    # use multiprocessing.\n    \"\"\"if byte:\n        return b\"\".join(result)\n    else:\n        return \"\".join(result)\"\"\"",
        "type": "code",
        "location": "/bootstrap/blitx/cruncher.py:83-92"
    },
    "505": {
        "file_id": 81,
        "content": "This code is creating a flattened list from a nested parameter 'param' with dimensions 'd'. It uses list comprehension to accomplish this and provides the option to join the resulting elements into a byte string or a regular string using multiprocessing.",
        "type": "comment"
    },
    "506": {
        "file_id": 82,
        "content": "/bootstrap/keller/gui_linux_x86_64.sh",
        "type": "filepath"
    },
    "507": {
        "file_id": 82,
        "content": "This Bash script runs Firefox within a sandboxed environment (firejail) and pipes its output to a Python tracker script. It seems to be used for GUI-based operations on Linux x86_64 systems.",
        "type": "summary"
    },
    "508": {
        "file_id": 82,
        "content": "#!/bin/bash\n#mkfifo blitx\n# maybe we need to use some nonblocking reading.\n#firejail firefox &> /dev/null & echo $!\nfirejail firefox &>/dev/stdout | python3 tracker_gui_linux_x86_64.py",
        "type": "code",
        "location": "/bootstrap/blitx/gui_linux_x86_64.sh:1-5"
    },
    "509": {
        "file_id": 82,
        "content": "This Bash script runs Firefox within a sandboxed environment (firejail) and pipes its output to a Python tracker script. It seems to be used for GUI-based operations on Linux x86_64 systems.",
        "type": "comment"
    },
    "510": {
        "file_id": 83,
        "content": "/bootstrap/keller/indicator.py",
        "type": "filepath"
    },
    "511": {
        "file_id": 83,
        "content": "This code reads a file, removes newline characters, and sends each line as a message with a one-second delay between messages.",
        "type": "summary"
    },
    "512": {
        "file_id": 83,
        "content": "from aloofclient import sender\nfrom cruncher import blackwhite\ndef returnAList(a):\n    with open(a,\"r\") as f:\n        s=f.read()\n        s=blackwhite(s,\"\\r\\n\",False)\n        return s\nr = returnAList(\"COMSEED_aarch64\")\n# print()\nimport time\nfor x in r:\n    sender(x)\n    time.sleep(1)\n        # print(d)",
        "type": "code",
        "location": "/bootstrap/blitx/indicator.py:1-15"
    },
    "513": {
        "file_id": 83,
        "content": "This code reads a file, removes newline characters, and sends each line as a message with a one-second delay between messages.",
        "type": "comment"
    },
    "514": {
        "file_id": 84,
        "content": "/bootstrap/keller/indicator.sh",
        "type": "filepath"
    },
    "515": {
        "file_id": 84,
        "content": "This script executes the Python file \"indicator.py\" using the Python 3 interpreter, likely serving as a bootstrap for running an indicator or dashboard program.",
        "type": "summary"
    },
    "516": {
        "file_id": 84,
        "content": "#!/bin/bash\npython3 indicator.py",
        "type": "code",
        "location": "/bootstrap/blitx/indicator.sh:1-2"
    },
    "517": {
        "file_id": 84,
        "content": "This script executes the Python file \"indicator.py\" using the Python 3 interpreter, likely serving as a bootstrap for running an indicator or dashboard program.",
        "type": "comment"
    },
    "518": {
        "file_id": 85,
        "content": "/bootstrap/keller/indicator_x86_64.py",
        "type": "filepath"
    },
    "519": {
        "file_id": 85,
        "content": "This code reads a file, removes specific line breaks, and sends the content to a sender function in a loop with a 1 second delay between each send.",
        "type": "summary"
    },
    "520": {
        "file_id": 85,
        "content": "from aloofclient import sender\nfrom cruncher import blackwhite\ndef returnAList(a):\n    with open(a,\"r\") as f:\n        s=f.read()\n        s=blackwhite(s,\"\\r\\n\",False)\n        return s\nr = returnAList(\"COMSEED_x86_64\")\n# print()\nimport time\nfor x in r:\n    sender(x)\n    time.sleep(1)\n        # print(d)",
        "type": "code",
        "location": "/bootstrap/blitx/indicator_x86_64.py:1-15"
    },
    "521": {
        "file_id": 85,
        "content": "This code reads a file, removes specific line breaks, and sends the content to a sender function in a loop with a 1 second delay between each send.",
        "type": "comment"
    },
    "522": {
        "file_id": 86,
        "content": "/bootstrap/keller/indicator_x86_64.sh",
        "type": "filepath"
    },
    "523": {
        "file_id": 86,
        "content": "The script is a Bash shell script that executes the Python3 code 'indicator_x86_64.py'. It appears to be responsible for running the associated Python script, likely an indicator script used in the bootstrap process.",
        "type": "summary"
    },
    "524": {
        "file_id": 86,
        "content": "#!/bin/bash\npython3 indicator_x86_64.py",
        "type": "code",
        "location": "/bootstrap/blitx/indicator_x86_64.sh:1-2"
    },
    "525": {
        "file_id": 86,
        "content": "The script is a Bash shell script that executes the Python3 code 'indicator_x86_64.py'. It appears to be responsible for running the associated Python script, likely an indicator script used in the bootstrap process.",
        "type": "comment"
    },
    "526": {
        "file_id": 87,
        "content": "/bootstrap/keller/launcher_aarch64_linux.sh",
        "type": "filepath"
    },
    "527": {
        "file_id": 87,
        "content": "The script attempts to execute a binary using a launcher on Aarch64 Linux. It first checks if it has the necessary permissions, and then executes the \"launcher_aarch64_linux.sh\" script. The execution is controlled by the \"libjudger.so\" library which enforces security rules, limits CPU time, memory usage, and process numbers. The input, output, and error paths are specified, and it runs with root privileges using the \"sudo\" command.",
        "type": "summary"
    },
    "528": {
        "file_id": 87,
        "content": "#!/data/data/com.termux/files/usr/bin/bash\nfile_target=$( ./on_premise_filter_aarch64.sh )\ncd bin/linux/aarch64\n#./libjudger.so --exe_path=$(which bash) --seccomp_rule_name=\"randomfuck\" --max_cpu_time=500 --max_real_time=5000 --max_memory=14213120 --max_stack=500000 --max_process_number=2 --args=\"--rcfile\" --args=\"../../../bashrc\"\n# does that work without intervention?\nwhile true\ndo\n\tsudo bash -c \"chmod 777 $file_target\"\n\tsudo bash -c \"echo $$ > $file_target\"\n\tif [ $? -eq 0 ]; then\n\t\tbreak\n\tfi\n\tcd ../../../\n\tsudo bash -c \"./launcher_aarch64_linux.sh\"\n\texit 0\ndone\nsudo ./libjudger.so --exe_path=$(which bash) --seccomp_rule_name=\"random\"  --max_cpu_time=500 --max_real_time=10000 --max_memory=14213120 --max_stack=500000 --max_process_number=2  --input_path=/proc/self/fd/0 --output_path=/proc/self/fd/1 --error_path=/proc/self/fd/2 --uid=0 --gid=0 --args=\"--rcfile\" --args=\"../../../bashrc\"",
        "type": "code",
        "location": "/bootstrap/blitx/launcher_aarch64_linux.sh:1-18"
    },
    "529": {
        "file_id": 87,
        "content": "The script attempts to execute a binary using a launcher on Aarch64 Linux. It first checks if it has the necessary permissions, and then executes the \"launcher_aarch64_linux.sh\" script. The execution is controlled by the \"libjudger.so\" library which enforces security rules, limits CPU time, memory usage, and process numbers. The input, output, and error paths are specified, and it runs with root privileges using the \"sudo\" command.",
        "type": "comment"
    },
    "530": {
        "file_id": 88,
        "content": "/bootstrap/keller/launcher_x86_64_linux.sh",
        "type": "filepath"
    },
    "531": {
        "file_id": 88,
        "content": "This script is setting necessary permissions and running a launcher on x86_64 Linux. It first changes the file's permission, writes its process ID into the file, then runs the launcher. Afterwards, it executes a libjudger with specific parameters for execution time, memory limits, security rules, and arguments.",
        "type": "summary"
    },
    "532": {
        "file_id": 88,
        "content": "#!/bin/bash\nfile_target=$( ./on_premise_filter.sh )\ncd bin/linux/x86_64\n#./libjudger.so --exe_path=$(which bash) --seccomp_rule_name=\"randomfuck\" --max_cpu_time=500 --max_real_time=5000 --max_memory=14213120 --max_stack=500000 --max_process_number=2 --args=\"--rcfile\" --args=\"../../../bashrc\"\n# does that work without intervention?\nwhile true\ndo\n        sudo bash -c \"chmod 777 $file_target\"\n        sudo bash -c \"echo $$ > $file_target\"\n        if [ $? -eq 0 ]; then\n                break\n        fi\n\tcd ../../../\n\tsudo bash -c \"./launcher_x86_64_linux.sh\"\n\texit 0\t\ndone\nsudo ./libjudger.so --exe_path=$(which bash) --seccomp_rule_name=\"randomfuck\"  --max_cpu_time=500 --max_real_time=10000 --max_memory=14213120 --max_stack=500000 --max_process_number=2 --args=\"--rcfile\" --args=\"../../../bashrc\"",
        "type": "code",
        "location": "/bootstrap/blitx/launcher_x86_64_linux.sh:1-17"
    },
    "533": {
        "file_id": 88,
        "content": "This script is setting necessary permissions and running a launcher on x86_64 Linux. It first changes the file's permission, writes its process ID into the file, then runs the launcher. Afterwards, it executes a libjudger with specific parameters for execution time, memory limits, security rules, and arguments.",
        "type": "comment"
    },
    "534": {
        "file_id": 89,
        "content": "/bootstrap/keller/on_premise_filter.sh",
        "type": "filepath"
    },
    "535": {
        "file_id": 89,
        "content": "The script checks for specific cgroups, retrieves kernel version, filters directories based on a target string, creates new \"blitx\" directory and sets CPU quota/period values, and handles invalid conditions by outputting \"none\".",
        "type": "summary"
    },
    "536": {
        "file_id": 89,
        "content": "#!/bin/bash\nget_checked(){\n\t# parameters are not named.\n\techo $1\n}\nget_kernel(){\n\tkern=$( echo $(./check_cgroups.sh | awk '{print $1}'))\n\t#kern=$()\n\tread -ra ADDR <<<\"$kern\"\n\tv=0\n\tfor i in \"${ADDR[@]}\";\n\tdo\n\t\tif [ \"$i\" == \"cpu\" ]; then\n\t\t\tv+=1\n\t\telse\n\t\t\t:\n\t\tfi\n#\t\techo $i\n\tdone\n\techo $v\n\tif [ $v -ne 0 ] ; then\n\t\treturn 0\n\telse\n\t\treturn 1\n\tfi\n}\nres0=$(echo $(./check_mount.sh | grep -i cpu | awk '{print $2}'))\nIFS=' '\nread -ra ADDR <<<\"$res0\"\nARRAY=()\nfor i in \"${ADDR[@]}\";\ndo\n\ttarget_string=\"cpu.cfs_quota_us\"\n\techo_string=$( get_checked $(sudo ls $i -1 | grep -i $target_string) )\n\tif [ \"$target_string\" == \"$echo_string\" ]; then\n\t\t# use this directory. append to candidate list.\n\t\tARRAY+=$i\n\telse\n\t\t:\n\t\t# this is when things going philosophical.\n\t\t# the null command.\n\tfi\n#\techo \"delimiter\"\n# check if it has the thing.\n# then make the subfolder. you might want to do it. any python bindings on cgroups?\n# worst day of my life.\n# might be used by cgroup2.\ndone\ncandidates=${#ARRAY[@]}\n#candidates=0\nif [ $candidates -gt 0 ]; then\n\ttardir=${ARRAY[0]}",
        "type": "code",
        "location": "/bootstrap/blitx/on_premise_filter.sh:1-53"
    },
    "537": {
        "file_id": 89,
        "content": "This script checks if a specific cgroup exists, retrieves kernel version, and finds directories related to CPU. It then filters out the appropriate directory based on a specified target string (e.g., \"cpu.cfs_quota_us\") and stores candidate directories in an array. If candidate directories exist, it selects the first one in the list.",
        "type": "comment"
    },
    "538": {
        "file_id": 89,
        "content": "\ttarget_string=\"blitx\"\n\techo_string=$( get_checked $(sudo ls $tardir -1 | grep -i $target_string) )\n\tif [ \"$target_string\" == \"$echo_string\" ]; then\n\t\t:\n\telse\n\t\tsudo mkdir $tardir/blitx\n\t\t# this is when things going philosophical.\n\t\t# the null command.\n\tfi\n\tsudo bash -c \"echo 5000 > $tardir/blitx/cpu.cfs_quota_us\"\n\tsudo bash -c \"echo 50000 > $tardir/blitx/cpu.cfs_period_us\"\n\t# do the stuff then.\n\t# return the directory, for future use.\n\techo $tardir/blitx/cgroup.procs\n\t# check if there's blitx directory.\n#\techo \"No candy\"\nelse\n\t# check kernel support first.\n\tif get_kernel; then\n\t\tdefault_cpu=/sys/fs/cgroups/cpu\n\t\tsudo mkdir -p $default_cpu/blitx \n\t\tsudo mount -t cgroup -o cpu none $default_cpu\n\t\t# if this fails, might be used by cgroup-v2, and we need to redefine the function.\n\t\t# really? not know.\n\t\tsudo bash -c \"echo 5000 > $default_cpu/blitx/cpu.cfs_quota_us\"\n\t\tsudo bash -c \"echo 50000 > $default_cpu/blitx/cpu.cfs_period_us\"\n\t\t# do the stuff then.\n\t\t# return the directory, for future use.\n\t\techo $default_cpu/blitx/cgroup.procs",
        "type": "code",
        "location": "/bootstrap/blitx/on_premise_filter.sh:54-82"
    },
    "539": {
        "file_id": 89,
        "content": "This script checks if the \"blitx\" directory exists. If it doesn't, it creates a new directory and sets CPU quota and period values. If the kernel supports cgroups, it creates a new cgroup and sets the same CPU quota and period values. It returns the directory path for future use.",
        "type": "comment"
    },
    "540": {
        "file_id": 89,
        "content": "\telse\n\t\techo none\n\tfi\n#\techo \"yes man\"\n# might have to handle the launcher yourself.\nfi\n#for i in \"${ARRAY[@]}\"\n#do\n#\techo $i\n#done",
        "type": "code",
        "location": "/bootstrap/blitx/on_premise_filter.sh:83-92"
    },
    "541": {
        "file_id": 89,
        "content": "This code snippet appears to be part of a script that filters on-premise deployments. When an invalid condition is met, it outputs \"none\". There are comments suggesting to add the message \"yes man\" and potentially handle the launcher manually. The code also includes a loop to iterate through an array, but it seems incomplete or unused.",
        "type": "comment"
    },
    "542": {
        "file_id": 90,
        "content": "/bootstrap/keller/on_premise_filter_aarch64.sh",
        "type": "filepath"
    },
    "543": {
        "file_id": 90,
        "content": "This code segment checks for AARCH64 directories, sets CPU quotas for a specific directory, and mounts cgroup file system for kernel support. It returns the directory path for future use. The script prints \"none\" if a certain condition is not met and suggests handling the launcher manually, implying it might be necessary in some cases.",
        "type": "summary"
    },
    "544": {
        "file_id": 90,
        "content": "#!/data/data/com.termux/files/usr/bin/bash\nget_checked(){\n\t# parameters are not named.\n\techo $1\n}\nget_kernel(){\n\tkern=$( echo $(./check_cgroups.sh | awk '{print $1}'))\n\t#kern=$()\n\tread -ra ADDR <<<\"$kern\"\n\tv=0\n\tfor i in \"${ADDR[@]}\";\n\tdo\n\t\tif [ \"$i\" == \"cpu\" ]; then\n\t\t\tv+=1\n\t\telse\n\t\t\t:\n\t\tfi\n#\t\techo $i\n\tdone\n\techo $v\n\tif [ $v -ne 0 ] ; then\n\t\treturn 0\n\telse\n\t\treturn 1\n\tfi\n}\nres0=$(echo $(./check_mount_aarch64.sh | grep -i cpu | awk '{print $2}'))\nIFS=' '\nread -ra ADDR <<<\"$res0\"\nARRAY=()\nfor i in \"${ADDR[@]}\";\ndo\n\ttarget_string=\"cpu.cfs_quota_us\"\n\techo_string=$( get_checked $(sudo ls $i -1 | grep -i $target_string) )\n\tif [ \"$target_string\" == \"$echo_string\" ]; then\n\t\t# use this directory. append to candidate list.\n\t\tARRAY+=$i\n\telse\n\t\t:\n\t\t# this is when things going philosophical.\n\t\t# the null command.\n\tfi\n#\techo \"delimiter\"\n# check if it has the thing.\n# then make the subfolder. you might want to do it. any python bindings on cgroups?\n# worst day of my life.\n# might be used by cgroup2.\ndone\ncandidates=${#ARRAY[@]}\n#candidates=0\nif [ $candidates -gt 0 ]; then",
        "type": "code",
        "location": "/bootstrap/blitx/on_premise_filter_aarch64.sh:1-52"
    },
    "545": {
        "file_id": 90,
        "content": "Function \"get_checked\" does not use named parameters and echoes the first parameter passed.\nFunction \"get_kernel\" retrieves kernel information from output of \"check_cgroups.sh\", counts occurrences of \"cpu\", and returns 0 or 1 based on the count.\nThe script checks if \"cpu.cfs_quota_us\" exists in mounted AARCH64 directories, appending valid folders to the ARRAY variable, then counts the number of candidates found.",
        "type": "comment"
    },
    "546": {
        "file_id": 90,
        "content": "\ttardir=${ARRAY[0]}\n\ttarget_string=\"blitx\"\n\techo_string=$( get_checked $(sudo ls $tardir -1 | grep -i $target_string) )\n\tif [ \"$target_string\" == \"$echo_string\" ]; then\n\t\t:\n\telse\n\t\tsudo mkdir $tardir/blitx\n\t\t# this is when things going philosophical.\n\t\t# the null command.\n\tfi\n\tsudo bash -c \"echo 20000 > $tardir/blitx/cpu.cfs_quota_us\"\n\tsudo bash -c \"echo 50000 > $tardir/blitx/cpu.cfs_period_us\"\n\t# do the stuff then.\n\t# return the directory, for future use.\n\techo $tardir/blitx/cgroup.procs\n\t# check if there's blitx directory.\n#\techo \"No candy\"\nelse\n\t# check kernel support first.\n\tif get_kernel; then\n\t\tdefault_cpu=/sys/fs/cgroups/cpu\n\t\tsudo mkdir -p $default_cpu/blitx \n\t\tsudo mount -t cgroup -o cpu none $default_cpu\n\t\t# if this fails, might be used by cgroup-v2, and we need to redefine the function.\n\t\t# really? not know.\n\t\tsudo bash -c \"echo 20000 > $default_cpu/blitx/cpu.cfs_quota_us\"\n\t\tsudo bash -c \"echo 50000 > $default_cpu/blitx/cpu.cfs_period_us\"\n\t\t# do the stuff then.\n\t\t# return the directory, for future use.\n\t\techo $default_cpu/blitx/cgroup.procs",
        "type": "code",
        "location": "/bootstrap/blitx/on_premise_filter_aarch64.sh:53-82"
    },
    "547": {
        "file_id": 90,
        "content": "Code checks if \"blitx\" directory exists, creates it if not, and sets CPU quotas. If kernel support is available, mounts the cgroup file system and sets CPU quotas for \"blitx\". Returns the directory path for future use.",
        "type": "comment"
    },
    "548": {
        "file_id": 90,
        "content": "\telse\n\t\techo none\n\tfi\n#\techo \"yes man\"\n# might have to handle the launcher yourself.\nfi\n#for i in \"${ARRAY[@]}\"\n#do\n#\techo $i\n#done",
        "type": "code",
        "location": "/bootstrap/blitx/on_premise_filter_aarch64.sh:83-92"
    },
    "549": {
        "file_id": 90,
        "content": "This code segment checks if a certain condition is met and prints \"none\" when it's not. It then suggests handling the launcher manually, implying that it might be necessary for certain scenarios. The inner loop seems unused as it is commented out.",
        "type": "comment"
    },
    "550": {
        "file_id": 91,
        "content": "/bootstrap/keller/pairclient.py",
        "type": "filepath"
    },
    "551": {
        "file_id": 91,
        "content": "Imports zmq, random, sys, and time libraries. Defines the port number as \"5757\". Initializes a ZMQ context and creates a PAIR socket. Sets socket to not linger on disconnect. Connects the socket to a server at \"tcp://127.0.0.7:%s\" % port. Prompts for user input, sends it through the socket in non-blocking mode, and handles any potential timeout.",
        "type": "summary"
    },
    "552": {
        "file_id": 91,
        "content": "import zmq\nimport random\nimport sys\nimport time\n# from sub2 import timeout\nport = \"5757\"\ncontext = zmq.Context()\nsocket = context.socket(zmq.PAIR)\nsocket.setsockopt(zmq.LINGER, 0)\n# this works. not blocking.\nsocket.connect(\"tcp://127.0.0.7:%s\" % port)\n#while True:\n#        msg = socket.recv()\n#        print msg\n# performing one-shot.\n#        socket.send(\"client message to server1\")\n# fuck.\n# for the latter.\nsend_string = socket.send_string\n# send_string = timeout(1)(socket.send_string)\nsend_string(input(\"Enter the command:\\r\\n\"))\n# cannot send shit.\n# will stuck if no receive. switch to non-block mode here?\n#        time.sleep(1)\n# asshole.\n# WTF?\n# just to send one single string.",
        "type": "code",
        "location": "/bootstrap/blitx/pairclient.py:1-28"
    },
    "553": {
        "file_id": 91,
        "content": "Imports zmq, random, sys, and time libraries. Defines the port number as \"5757\". Initializes a ZMQ context and creates a PAIR socket. Sets socket to not linger on disconnect. Connects the socket to a server at \"tcp://127.0.0.7:%s\" % port. Prompts for user input, sends it through the socket in non-blocking mode, and handles any potential timeout.",
        "type": "comment"
    },
    "554": {
        "file_id": 92,
        "content": "/bootstrap/keller/pairserver.py",
        "type": "filepath"
    },
    "555": {
        "file_id": 92,
        "content": "This code imports necessary modules, sets up a TCP server socket for communication with clients, and includes a function called \"onceMore\" that will receive a message from the connected client. It also has a comment expressing confusion about a missing part of the code.",
        "type": "summary"
    },
    "556": {
        "file_id": 92,
        "content": "import zmq\nimport random\nimport sys\nimport time\nport = \"5757\"\ncontext = zmq.Context()\nsocket = context.socket(zmq.PAIR)\nsocket.bind(\"tcp://127.0.0.7:%s\" % port)\n# while True:\n#        socket.send_string(\"Server message to client3\")\n# what the fuck is this?\ndef onceMore():\n    msg = (socket.recv_string()+\"\\r\\n\").encode()\n    return msg\n    # will it stuck?\n    # print(type(msg),msg)\n        # this is fuck.\n#        time.sleep(1)\n# we'll receive it.",
        "type": "code",
        "location": "/bootstrap/blitx/pairserver.py:1-20"
    },
    "557": {
        "file_id": 92,
        "content": "This code imports necessary modules, sets up a TCP server socket for communication with clients, and includes a function called \"onceMore\" that will receive a message from the connected client. It also has a comment expressing confusion about a missing part of the code.",
        "type": "comment"
    },
    "558": {
        "file_id": 93,
        "content": "/bootstrap/keller/pidTest.py",
        "type": "filepath"
    },
    "559": {
        "file_id": 93,
        "content": "Iterates through input lines, then characters in each line, encodes and prints the character along with its type. Ends each line with \"one line ends.\" message.",
        "type": "summary"
    },
    "560": {
        "file_id": 93,
        "content": "import sys\nfor x in sys.stdin:\n    for z in x:\n        print(z.encode(),type(z))\n# to integer?\n    print(\"one line ends.\")",
        "type": "code",
        "location": "/bootstrap/blitx/pidTest.py:1-6"
    },
    "561": {
        "file_id": 93,
        "content": "Iterates through input lines, then characters in each line, encodes and prints the character along with its type. Ends each line with \"one line ends.\" message.",
        "type": "comment"
    },
    "562": {
        "file_id": 94,
        "content": "/bootstrap/keller/pidTest.sh",
        "type": "filepath"
    },
    "563": {
        "file_id": 94,
        "content": "The script echoes a value representing the current process ID (PID) using a specific hexadecimal format.",
        "type": "summary"
    },
    "564": {
        "file_id": 94,
        "content": "#!/bin/bash\necho -e \"\\x00\\xd0\\x9d\\x09$$\"",
        "type": "code",
        "location": "/bootstrap/blitx/pidTest.sh:1-2"
    },
    "565": {
        "file_id": 94,
        "content": "The script echoes a value representing the current process ID (PID) using a specific hexadecimal format.",
        "type": "comment"
    },
    "566": {
        "file_id": 95,
        "content": "/bootstrap/keller/pid_linux_xorg.sh",
        "type": "filepath"
    },
    "567": {
        "file_id": 95,
        "content": "Script for finding the visible window with a specific PID using xdotool and checking its properties with xprop.",
        "type": "summary"
    },
    "568": {
        "file_id": 95,
        "content": "#!/bin/bash\nxdotool search --any --pid 3193\necho ______SPILTER______\nxdotool search --onlyvisible --pid 3193\n# useful even minimized\necho ______SPILTER______\nxprop -id 46137345\n# check for class name? not stable.",
        "type": "code",
        "location": "/bootstrap/blitx/pid_linux_xorg.sh:1-8"
    },
    "569": {
        "file_id": 95,
        "content": "Script for finding the visible window with a specific PID using xdotool and checking its properties with xprop.",
        "type": "comment"
    },
    "570": {
        "file_id": 96,
        "content": "/bootstrap/keller/sample.sh",
        "type": "filepath"
    },
    "571": {
        "file_id": 96,
        "content": "This script defines a function called \"get_kernel\" that checks if the kernel has any non-cpu cgroups. If it does, it returns 0 (indicating no CPU usage), otherwise it returns 1. The script then calls this function and conditionally echoes either \"something\" or \"nothing\".",
        "type": "summary"
    },
    "572": {
        "file_id": 96,
        "content": "#!/bin/bash\nget_kernel(){\n\tkern=$( echo $(./check_cgroups.sh | awk '{print $1}'))\n\t#kern=$()\n\tread -ra ADDR <<<\"$kern\"\n\tv=0\n\tfor i in \"${ADDR[@]}\";\n\tdo\n\t\tif [ \"$i\" == \"cpu\" ]; then\n\t\t\tv+=1\n\t\telse\n\t\t\t:\n\t\tfi\n#\t\techo $i\n\tdone\n\techo $v\n\tif [ $v -ne 0 ] ; then\n\t\treturn 0\n\telse\n\t\treturn 1\n\tfi\n}\n#echo $( retval get_kernel )\nif get_kernel; then\n\techo \"something\"\nelse\n\techo \"nothing\"\nfi",
        "type": "code",
        "location": "/bootstrap/blitx/sample.sh:1-28"
    },
    "573": {
        "file_id": 96,
        "content": "This script defines a function called \"get_kernel\" that checks if the kernel has any non-cpu cgroups. If it does, it returns 0 (indicating no CPU usage), otherwise it returns 1. The script then calls this function and conditionally echoes either \"something\" or \"nothing\".",
        "type": "comment"
    },
    "574": {
        "file_id": 97,
        "content": "/bootstrap/keller/some_script.py",
        "type": "filepath"
    },
    "575": {
        "file_id": 97,
        "content": "This code snippet is printing the value of a variable named \"param\".",
        "type": "summary"
    },
    "576": {
        "file_id": 97,
        "content": "print(param)",
        "type": "code",
        "location": "/bootstrap/keller/some_script.py:1-1"
    },
    "577": {
        "file_id": 97,
        "content": "This code snippet is printing the value of a variable named \"param\".",
        "type": "comment"
    },
    "578": {
        "file_id": 98,
        "content": "/bootstrap/keller/src/COMMAND",
        "type": "filepath"
    },
    "579": {
        "file_id": 98,
        "content": "This code is writing memory contents to a file named 'dump' in the directory '/dev/shm'.",
        "type": "summary"
    },
    "580": {
        "file_id": 98,
        "content": "dump memory /dev/shm/dump",
        "type": "code",
        "location": "/bootstrap/keller/src/COMMAND:1-1"
    },
    "581": {
        "file_id": 98,
        "content": "This code is writing memory contents to a file named 'dump' in the directory '/dev/shm'.",
        "type": "comment"
    },
    "582": {
        "file_id": 99,
        "content": "/bootstrap/keller/src/README",
        "type": "filepath"
    },
    "583": {
        "file_id": 99,
        "content": "This code provides instructions for modifying browsers and security settings to allow running a specific code, possibly related to web sockets. It mentions alternative tools like PhantomJS or Electron, and suggests checking if the code can be run without patches.",
        "type": "summary"
    },
    "584": {
        "file_id": 99,
        "content": "go ahead, solve your problem in a brand new way instead of just manual looking and pasting. that's the purpose.\ndiff rule: similar -> perform similarity test -> continue on children\nthey force me to become a hacker. they deserve this: death.\nbackground -> request, handle cookies, browser history, favourites.\ntabs -> content processing, subrequest.\nfirefox -> about:config -> websocket allow from https\nor add your root certificate. or just allow exceptions:\ncertificate manager -> server -> add exception\nchrome -> chrome://flags -> allow invalid certs from localhost\nallow insecure websockets.\nadd ca to system so normal code will be running fine.\nterm->html:\ngem install terminal\nhttps://github.com/buildkite/terminal-to-html\ndisable safety protocols. -> cors allowed -> plugin\n<RECOMPILE>\nwhat is the browser worker?\nso there are two choices: phantomjs, electron.\nor many alternatives.\ncheck if possible to run nightmare without patch?",
        "type": "code",
        "location": "/bootstrap/keller/src/README:1-39"
    },
    "585": {
        "file_id": 99,
        "content": "This code provides instructions for modifying browsers and security settings to allow running a specific code, possibly related to web sockets. It mentions alternative tools like PhantomJS or Electron, and suggests checking if the code can be run without patches.",
        "type": "comment"
    },
    "586": {
        "file_id": 100,
        "content": "/bootstrap/keller/src/SEED",
        "type": "filepath"
    },
    "587": {
        "file_id": 100,
        "content": "The code contains two phrases, presumably instructions on how to kill one's father and mother. The purpose of this code is unclear and may be intended for satirical or educational purposes.",
        "type": "summary"
    },
    "588": {
        "file_id": 100,
        "content": "how to kill your father\nhow to kill your mother",
        "type": "code",
        "location": "/bootstrap/keller/src/SEED:1-2"
    },
    "589": {
        "file_id": 100,
        "content": "The code contains two phrases, presumably instructions on how to kill one's father and mother. The purpose of this code is unclear and may be intended for satirical or educational purposes.",
        "type": "comment"
    },
    "590": {
        "file_id": 101,
        "content": "/bootstrap/keller/src/blindknight.js",
        "type": "filepath"
    },
    "591": {
        "file_id": 101,
        "content": "The code uses Nightmare, a headless browser, to visit \"https://www.baidu.com\" and retrieve the document title. It also defines a sleep function for waiting and an async function named santa. The code has issues with running on Linux due to sandbox restrictions and requires adjustments for proper execution.",
        "type": "summary"
    },
    "592": {
        "file_id": 101,
        "content": "//use nodejs this time.\nconst Nightmare = require('nightmare')\n//const nightmare = Nightmare({ show: true,switches:{'ignore-certificate-errors': true}})\n// shit. nightmare won't run on linux.\n// too few?\n// must be string array.\nconst nightmare = Nightmare({cli_args:[\"--no-sandbox\"],show:false});\n//const nightmare = Nightmare({width:1000,height:1000,switches: {\"sandbox\":false},show:true});\n// not running.\nfunction sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n}\nnightmare.goto('https://www.baidu.com').evaluate(() => {return document.title;}).end().then((title) => {console.log(title);})\nasync function santa(){await sleep(10);}\nsanta();\n// all fucked up.",
        "type": "code",
        "location": "/bootstrap/keller/src/blindknight.js:1-18"
    },
    "593": {
        "file_id": 101,
        "content": "The code uses Nightmare, a headless browser, to visit \"https://www.baidu.com\" and retrieve the document title. It also defines a sleep function for waiting and an async function named santa. The code has issues with running on Linux due to sandbox restrictions and requires adjustments for proper execution.",
        "type": "comment"
    },
    "594": {
        "file_id": 102,
        "content": "/bootstrap/keller/src/cagen.sh",
        "type": "filepath"
    },
    "595": {
        "file_id": 102,
        "content": "This script generates SSL certificates for a localhost server. It creates directories, generates and signs key and certificate files using OpenSSL commands, and follows specific configuration steps for the server and CA certificates.",
        "type": "summary"
    },
    "596": {
        "file_id": 102,
        "content": "#!/bin/bash\nrm -rf certs\nmkdir -p certs/ca\ncd certs/ca\nopenssl genrsa -out ca.key 2048\nopenssl req -x509 -new -nodes \\\n      -key ca.key -subj \"/CN=localhost/C=US/L=CALIFORNIA\" \\\n      -days 1825 -out ca.crt\ncd ..\nopenssl genrsa -out server.key 2048\ncat > csr.conf <<EOF\n[ req ]\ndefault_bits = 2048\nprompt = no\ndefault_md = sha256\nreq_extensions = req_ext\ndistinguished_name = dn\n[ dn ]\nC = US\nST = California\nL = San Fransisco\nO = Scriptcrunch\nOU = Scriptcrunch Dev\nCN = localhost\n[ req_ext ]\nsubjectAltName = @alt_names\n[ alt_names ]\nDNS.1 = localhost\nIP.1 = 127.0.0.1\nEOF\nopenssl req -new -key server.key -out server.csr -config csr.conf\nopenssl x509 -req -in server.csr -CA ca/ca.crt -CAkey ca/ca.key \\\n-CAcreateserial -out server.crt -days 10000 \\\n-extfile csr.conf",
        "type": "code",
        "location": "/bootstrap/blitx/src/cagen.sh:1-38"
    },
    "597": {
        "file_id": 102,
        "content": "This script generates SSL certificates for a localhost server. It creates directories, generates and signs key and certificate files using OpenSSL commands, and follows specific configuration steps for the server and CA certificates.",
        "type": "comment"
    },
    "598": {
        "file_id": 103,
        "content": "/bootstrap/keller/src/ced/README.md",
        "type": "filepath"
    },
    "599": {
        "file_id": 103,
        "content": "This repository serves as a demo for Dan Shultz's tutorial on creating a basic Chrome extension. It also includes fixes for some typographical errors in the original code. The JavaScript code might need to be adapted due to differences between Chrome and other browsers, specifically when working with WebSockets.",
        "type": "summary"
    }
}